<style>
  .label-primary {
    margin-right: 5px;
  }
</style>
<div class="project_stepy"></div>

<div>
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" role="tablist" id="improve_content" style="display: none;">
    <li role="presentation" class="active">
      <a href="#round_pdca" aria-controls="round_pdca" role="tab" data-toggle="tab">PDCA</a>
    </li>
    <li role="presentation">
      <a href="#round_ie_structure" aria-controls="round_ie_structure" role="tab" data-toggle="tab">IE Structure</a>
    </li>

    <li role="presentation">
      <a href="#round_kpi_setting" aria-controls="round_kpi_setting" role="tab" data-toggle="tab"> KPI Setting</a>
    </li>
  </ul>

  <!-- Tab panes -->
  <div class="tab-content">
    <!--PDCA-->
    <div role="tabpanel" class="tab-pane active step_content" id="round_pdca">

      <div class="round-add-pdca">
        <button class="btn-flat-success">
          <i class="glyphicon glyphicon-plus-sign"></i>
          Add PDCA
        </button>
      </div>

      <div class="row" style="margin:50px 0 0 0;">
        <table class="table table-default">
          <thead>
          <tr>
            <th>Item</th>
            <th>Improvement Point</th>
            <th>Owner</th>
            <th>Deadline</th>
            <th>Status</th>
            <th>Saving</th>
            <th>Remark</th>
            <!--<th>Options</th>-->
          </tr>
          </thead>
          <tbody class="round-pdca-tbody">
          <% @project_item.pdca_items.each do |pdca_item| %>
              <tr id="<%= pdca_item.id %>">
                <td><%= pdca_item.title %></td>
                <td><%= pdca_item.content %></td>
                <td>
                  <% pdca_item.task_users.each do |tu| %>
                              <span class="label label-primary" style="cursor: pointer;" title=" <%= tu.user.blank? ? '' : tu.user.email %>">
                                <%= tu.user.blank? ? '' : tu.user.name %>
                              </span>
                  <% end %>
                </td>
                <td><%= pdca_item.due_time %></td>
                <td id="<%= pdca_item.status %>">
                          <span class="label label-success">
                            <%= TaskStatus.display pdca_item.status %></span>
                </td>
                <td><%= pdca_item.result %></td>
                <td><%= pdca_item.remark %></td>
              </tr>
          <% end %>
          </tbody>
        </table>
      </div>

      <footer class="footer">
        <button type="submit" class="btn-flat-success btn-next btn-round-pdca">
          Next
        </button>
      </footer>
    </div>

    <!--IE Structure-->
    <div role="tabpanel" class="tab-pane step_content" id="round_ie_structure">
      <input type="hidden" id="round_diagram_id">

      <div class="row structure-title" style="margin: 0;border-bottom: 1px solid #23B7E5;">
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
          <div id="myPaletteDiv"></div>
        </div>
        <div class="col-lg-6 col-mc-6 col-sm-6 col-xs-12" style="text-align: right; padding-right: 26px;">
          <button id="loadModel" class="btn-flat-success" onclick="load()" style="width: 140px; height: 40px; margin-top:8px;">Load</button>
        </div>
      </div>

      <div class="structure-content">
        <div style="display: inline-block; padding: 5px; width:80%;">
          <div id="myDiagramDiv" style="border: 1px solid #23B7E5;"></div>
        </div>
        <div style="display: inline-block; padding: 5px; width:18%">
          <div id="myTreeView" style="border: solid 1px #23B7E5;"></div>
        </div>
      </div>

      <!--will display-->
      <textarea id="mySavedModel" style="width:100%;height:300px;margin-top: 100px;"></textarea>

      <footer class="footer">
        <button type="submit" class="btn-flat-success btn-next btn-ie-structure-next">
          Next
        </button>
      </footer>
    </div>

    <!--Kpi Setting-->
    <div role="tabpanel" class="tab-pane step_content" id="round_kpi_setting">
      <div id="kpi_settings" class="panel-group" role="tablist" aria-multiselectable="true"></div>

      <footer class="footer">
        <button type="submit" class="btn-flat-success btn-next btn-kpi-setting-next">
          Finish
        </button>
      </footer>
    </div>
  </div>
</div>

<!--Add PDCA-->
<div class="md-modal md-effect-1" id="round_add_pdca">
  <div class="md-content">
    <h4>ADD PDCA</h4>
    <div class="pull-right md-close" style="margin-top: -50px;margin-right: -20px;">
      <i style="color: #E67E22;" class="glyphicon glyphicon-remove"></i>
    </div>

    <div class="round-pdca-list">
      <input type="text" class="form-control" id="round_pdca_item" placeholder="PDCA Item">

      <textarea type="text" id="round_pdca_point" class="form-control" placeholder="Imptovement Point" style="margin-top: 10px; margin-bottom: 10px;"></textarea>

      <textarea class="form-control" id="round_pdca_owner"></textarea>

      <input type="text" id="round_deadline" class="form-control date-picker" placeholder="Deadline" style="margin-top: 10px;">
    </div>

    <div class="round-pdca-btn">
      <button class="btn-flat-primary round-pdca-btn-add">
        ADD
      </button>
    </div>
  </div>
</div>

<div class="md-overlay"></div>

<!--Target-->
<div style="display: none;">
  <div id="round-target-modal">
    <div class="popModal_content">
      <div class="input-group">
        <span class="input-group-addon" id="round-target-name">target name</span>
        <input type="text" class="form-control input-round-target-name" placeholder="Target Name" aria-describedby="round-target-name">
      </div>

      <div class="input-group" style="margin-top: 5px;">
        <span class="input-group-addon" id="round-target-value">target value</span>
        <input type="number" class="form-control input-round-target-value" placeholder="Target Value" aria-describedby="round-target-value">
      </div>
    </div>

    <div class="popModal_footer">
      <button type="button" class="btn-flat-primary" data-popModalBut="ok">Add</button>
    </div>
  </div>
</div>

<script type="text/javascript" charset="utf-8">
  /******************************************************************************
   PDCA
   ******************************************************************************/
  $('.btn-round-pdca').click(function () {
    var nowStep = $('.project_stepy').getStep();
    nowStep++;
    $('.project_stepy').setStep(nowStep);

    click_tabs("improve_content", "round_ie_structure");

    round_ie_structure();

    myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
    // share all of the data with the tree view
    myTreeView.model.nodeDataArray = myDiagram.model.nodeDataArray;

  });

  $('.round-add-pdca').click(function () {
    $('#round_add_pdca').addClass('md-show');
    ClosePop('#round_add_pdca');
  });

  $('.round-pdca-btn-add').unbind('click').click(function () {
    var ItemID = '<%= @project_item.id %>';
    var PDCAItem = $('#round_pdca_item').val();
    var PDCAPoint = $('#round_pdca_point').val();
    var PDCAEmail = $('#round_pdca_owner').tagEditor('getTags')[0].tags;
    var Deadline = $('#round_deadline').val();

    $.ajax({
      url: '/pdca_items',
      type: 'post',
      dateType: 'json',
      data: {
        project_item_id: ItemID,
        item: PDCAItem,
        improvement_point: PDCAPoint,
        emails: PDCAEmail,
        due_time: Deadline
      },
      success: function (data) {
        console.log(data);

        if (data.result) {
          var PDCAOwner = data.owner;
          var PDCAOwnerHtml = "";
          for (var i = 0; i < PDCAOwner.length; i++) {
            PDCAOwnerHtml += "<span class='label label-primary' title='" + PDCAOwner[i].email + "'>" + PDCAOwner[i].name + "</span>";
          }

          var PDCA = data.pdca;

          $('<tr>' +
              '<td>' + PDCA.title + '</td>' +
              '<td>' + PDCA.content + '</td>' +
              '<td>' + PDCAOwnerHtml + '</td>' +
              '<td>' + new Date(PDCA.due_time).Format("yyyy/MM/dd") + '</td>' +
              '<td title="100"><span class="label label-success">进行中</span></td>' +
              '<td></td>' +
              '<td></td>' +
//              '<td id="' + PDCA.id + '"><i class="IconA glyphicon glyphicon-pencil edit-pdca md-trigger" data-modal="edit_pdca" style="color: steelblue;"></i>' +
//              '<i class="IconA glyphicon glyphicon-remove-circle cancel-pdca md-trigger" data-modal="cancel_pdca"  style="color: #16A085;"></i>' +
//              '<i class="IconA glyphicon glyphicon-ok-sign finish-pdca md-trigger" data-modal="finish_pdca"  style="color: #E67E22;"></i></td>' +
              '<tr>').prependTo('.round-pdca-tbody');
          $('#round_add_pdca').removeClass("md-show");
        } else {
          $('<div>' + data.content + '</div>').notifyModal();
        }
      },
      error: function () {
        console.log('PDCA Create Error!');
      }
    });
  });

  /******************************************************************************
   IE Structure
   ******************************************************************************/
  var myDiagram = "";

  function round_ie_structure() {
    var colors = {
      blue: "#00B5CB",
      orange: "#F47321",
      green: "#C8DA2B",
      gray: "#888",
      white: "#fff",
      black: "#000",
      defaultFill: "lightseagreen",
      workpositonPoint: 'lightblue',
      workpositionStorke: 'lightblue',
      UnselectedBrush: 'lightseagreen',
      SelectedBrush: 'dodgerblue'
    };

    var $_$ = go.GraphObject.make;

//    Define Diagram
    myDiagram = $_$(go.Diagram, "myDiagramDiv",
        {
          mouseDrop: function (e) {
            finishDrop(e, null);
          },
          initialContentAlignment: go.Spot.Center,
          allowDrop: true,
          "commandHandler.archetypeGroupData": {isGroup: true, category: "WorkStation"},
          "undoManager.isEnabled": true,
          // when a node is selected in the main Diagram, select the corresponding tree node
          "ChangedSelection": function (e) {
            if (myChangingSelection) return;
            myChangingSelection = true;
            var diagnodes = new go.Set();
            myDiagram.selection.each(function (n) {
              diagnodes.add(myTreeView.findNodeForData(n.data));
            });
            myTreeView.clearSelection();
            myTreeView.selectCollection(diagnodes);
            myChangingSelection = false;
          }
        }
    );

    var myChangingSelection = false;  // to protect against recursive selection changes

    // when the document is modified, add a "*" to the title and enable the "Save" button
    myDiagram.addDiagramListener("Modified", function (e) {
      var button = document.getElementById("saveModel");
      if (button) button.disabled = !myDiagram.isModified;
      var idx = document.title.indexOf("*");
      if (myDiagram.isModified) {
        if (idx < 0) document.title += "*";
      } else {
        if (idx >= 0) document.title = document.title.substr(0, idx);
      }
    });

// Worker
    myDiagram.nodeTemplateMap.add("Worker",
        $_$(go.Node, go.Panel.Auto, {
              margin: new go.Margin(0, 0, 10, 0),
              cursor: "pointer"
            },
            new go.Binding("location", "location", go.Point.parse).makeTwoWay(go.Point.stringify),
            $_$(go.Panel, "Horizontal",
                $_$(go.Picture,
                    {
                      width: 20,
                      height: 20,
                      margin: new go.Margin(0, 4, 0, 0),
                      imageStretch: go.GraphObject.Uniform,
                      source: '/assets/ie-structure/user.png'
                    }
                ),
                $_$(go.TextBlock, "员工",
                    {
                      font: "bold 12pt Helvetica, Arial, sans-serif",
                      stroke: colors["black"],
                      editable: true,
                      textAlign: "center"
                    },
                    new go.Binding("text", "text").makeTwoWay())
            )
        )
    );

    // Upon a drop onto a Group, we try to add the selection as members of the Group.
    // Upon a drop onto the background, or onto a top-level Node, make selection top-level.
    // If this is OK, we're done; otherwise we cancel the operation to rollback everything.
    function finishDrop(e, grp) {
      var ok = (grp !== null
          ? grp.addMembers(grp.diagram.selection, true)
          : e.diagram.commandHandler.addTopLevelParts(e.diagram.selection, true));
      if (!ok) e.diagram.currentTool.doCancel();
    }

//    WorkStation
    myDiagram.groupTemplateMap.add("WorkStation",
        $_$(go.Group, go.Panel.Auto,
            {
              resizable: true,
              resizeObjectName: "Panel",
              ungroupable: false,
              background: "lightseagreen",
              cursor: "pointer",
              computesBoundsAfterDrag: true,
              mouseDrop: finishDrop,
              handlesDragDropForMembers: true
            },
            new go.Binding("background", "background").makeTwoWay(),
            new go.Binding("location", "location", go.Point.parse).makeTwoWay(go.Point.stringify),
            $_$(go.Shape, "Rectangle",
                {
                  stroke: "transparent",
                  visible: false
                }),
            $_$(go.Shape, "Circle",
                {
                  alignment: go.Spot.TopRight,
                  stroke: null,
                  fill: "green",
                  margin: new go.Margin(5, 5, 0, 0),
                  desiredSize: new go.Size(20, 20)
                }),
            $_$(go.TextBlock, "P", {
              alignment: go.Spot.TopRight,
              editable: false,
              margin: new go.Margin(10, 10, 0, 0),
              font: "bold 13px sans-serif",
              stroke: colors["white"]
            }), new go.Binding("text", "text"),
            $_$(go.Shape, borderStyle(),
                {
                  alignment: go.Spot.Bottom,
                  name: "CHECK",
                  fill: 'transparent',
                  stroke: "transparent",
                  width: 14,
                  height: 14,
                  visible: false
                },
                new go.Binding("visible", "isSelected").makeTwoWay()),
            {
              click: function (e, obj) {
                var oldskips = obj.diagram.skipsUndoManager;
                obj.diagram.skipsUndoManager = true;
                if (obj.background === "lightseagreen") {
                  obj.background = "dodgerblue";
                } else {
                  obj.background = "lightseagreen";
                }
                obj.diagram.skipsUndoManager = oldskips;

                var shape = obj.findObject("CHECK");
                shape.diagram.startTransaction("checkbox");
                shape.visible = !shape.visible;
                shape.diagram.commitTransaction("checkbox");
              }
            },
            $_$(go.Panel, go.Panel.Vertical,
                {
                  name: "Panel"
                },
                new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
                $_$(go.Panel, go.Panel.Auto,
                    $_$(go.TextBlock,
                        {
                          alignment: go.Spot.Left,
                          editable: true,
                          margin: new go.Margin(5, 0, 0, 0),
                          font: "bold 16px sans-serif",
                          stroke: colors["white"]
                        },
                        new go.Binding("text", "text").makeTwoWay()
                    )
                )
            )
        )
    );

    myDiagram.addModelChangedListener(function (e) {
      var DiagramID = <%= @project_item.diagram.id %>;
      if (e.model.skipsUndoManager) return;
      // don't need to start/commit a transaction because the UndoManager is shared with myTreeView
      if (e.modelChange === "nodeGroupKey" || e.modelChange === "nodeParentKey") {
        // handle structural change: group memberships
        var treenode = myTreeView.findNodeForData(e.object);
        if (treenode !== null) treenode.updateRelationshipsFromData();

        console.log('model Change   Node GroupKey')
      } else if (e.change === go.ChangedEvent.Property) {
        var treenode = myTreeView.findNodeForData(e.object);
        if (treenode !== null) treenode.updateTargetBindings();

        if (e.mm == "text") {
          var UpdateNode = e.object;
          $.ajax({
            url: '/diagrams/' + DiagramID + '/nodes/' + UpdateNode.key,
            type: 'put',
            dataType: 'json',
            data: {
              id: UpdateNode.key,
              node: {
                name: UpdateNode.text,
                code: UpdateNode.code
              }
            },
            success: function (data) {
//              console.log(data);
            },
            error: function () {
              $('<div>Something Error!</div>').notifyModal();
            }
          });
        }
      } else if (e.change === go.ChangedEvent.Insert && e.propertyName === "nodeDataArray") {
        console.log('change insert');
        // pretend the new data isn't already in the nodeDataArray for myTreeView
        myTreeView.model.nodeDataArray.splice(e.newParam, 1);
        // now add to the myTreeView model using the normal mechanisms
        myTreeView.model.addNodeData(e.newValue);

        var NewNode = e.newValue;
        var NewParam = e.newParam;

//        if (NewNode.category == "Worker" && typeof(NewNode.group) == "undefined") {
//          $('<div>Worker should belong to WorkStation.</div>').notifyModal();
//        }

        var Type = 100;
        if (NewNode.category == "WorkStation") {
          Type = 200;
        } else if (NewNode.category == "WorkGroup") {
          Type = 300;
        }

        $.ajax({
          url: '/diagrams/' + DiagramID + '/nodes',
          type: 'post',
          dataType: 'json',
          async: false,
          data: {
            node: {
              name: NewNode.text,
              type: Type
            }
          },
          success: function (data) {
            NewNode.key = data.id;
            NewNode.text = data.name;
            NewNode.code = data.code;
            NewNode.node_set_id = data.node_set_id;
          },
          error: function () {
            console.log("Something Error!");
          }
        });

//        if (NewNode.category == "WorkStation") {
//
//        } else if (NewNode.category == "Worker") {
//          $.ajax({
//            url: '/diagrams/' + DiagramID + '/nodes',
//            type: 'post',
//            dataType: 'json',
//            async: false,
//            data: {
//              node: {
//                name: NewNode.text,
//                type: Type
//              }
//            },
//            success: function (data) {
//              console.log(data);
////              NewNode.key = data.id;
////              NewNode.text = data.name;
////              NewNode.returnParams = data;
//            },
//            error: function () {
//              console.log("Something Error!");
//            }
//          });
//        }
      } else if (e.change === go.ChangedEvent.Remove && e.propertyName === "nodeDataArray") {
        console.log(' Change   Remove NodeDataArray');
        // remove the corresponding node from myTreeView
        var treenode = myTreeView.findNodeForData(e.oldValue);
        if (treenode !== null) myTreeView.remove(treenode);
      }
    });

    myPalette =
        $_$(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
            {
              "animationManager.duration": 200, // slightly longer than default (600ms) animation
              nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
              groupTemplateMap: myDiagram.groupTemplateMap,
              initialContentAlignment: go.Spot.Center,
              model: new go.GraphLinksModel([  // specify the contents of the Palette
                {
                  category: "Worker",
                  text: "员工",
                  code: "",
                  node_set_id: ""
                },
                {
                  category: "WorkStation",
                  size: "80 40",
                  text: "工位",
                  background: "lightseagreen",
                  isGroup: true,
                  code: "",
                  node_set_id: ""
                }
              ], [])
            }
        );

    myTreeView = $_$(go.Diagram, "myTreeView",
        {
          allowMove: false,  // don't let users mess up the tree
          allowCopy: false,  // but you might want this to be false
          "commandHandler.copiesTree": false,
          "commandHandler.copiesParentKey": false,
          allowDelete: false,  // but you might want this to be false
          "commandHandler.deletesTree": false,
          allowHorizontalScroll: false,
          allowVerticalScroll: false,
          layout: $_$(go.TreeLayout,
              {
                alignment: go.TreeLayout.AlignmentStart,
                angle: 0,
                compaction: go.TreeLayout.CompactionNone,
                layerSpacing: 16,
                layerSpacingParentOverlap: 1,
                nodeIndent: 2,
                nodeIndentPastParent: 0.88,
                nodeSpacing: 5,
                setsPortSpot: false,
                setsChildPortSpot: false
              }),
          // when a node is selected in the tree, select the corresponding node in the main diagram
          "ChangedSelection": function (e) {
            if (myChangingSelection) return;
            myChangingSelection = true;
            var diagnodes = new go.Set();
            myTreeView.selection.each(function (n) {
              diagnodes.add(myDiagram.findNodeForData(n.data));
            });
            myDiagram.clearSelection();
            myDiagram.selectCollection(diagnodes);
            myChangingSelection = false;
          }
        }
    );

    myTreeView.nodeTemplateMap.add("Worker",
        $_$(go.Node,
            {
              selectionAdorned: false
            },
            $_$(go.Panel, "Horizontal",
                $_$(go.Picture,
                    {
                      width: 24,
                      height: 24,
                      margin: new go.Margin(0, 4, 0, 0),
                      imageStretch: go.GraphObject.Uniform
                    },
                    new go.Binding("source", "isTreeLeaf", imageConverter).ofObject()),
                $_$(go.TextBlock,
                    {font: '9pt Verdana, sans-serif'},
                    new go.Binding("text", "text", function (s) {
                      return s;
                    })
                )
            )
        )
    );

    //WorkStation
    myTreeView.nodeTemplateMap.add("WorkStation",
        $_$(go.Node,
            {
              selectionAdorned: false
            },
            $_$("TreeExpanderButton",
                {
                  width: 20,
                  "ButtonBorder.fill": "#f3f3f3",
                  "ButtonBorder.stroke": null,
                  "_buttonFillOver": "rgba(0,128,255,0.25)",
                  "_buttonStrokeOver": null
                }),
            $_$(go.Panel, "Horizontal",
                {
                  position: new go.Point(16, 0)
                },
                $_$(go.Panel, "Horizontal",
                    $_$(go.Shape, borderStyle(),
                        {width: 14, height: 14}),
                    $_$(go.Shape, borderStyle(),
                        {
                          name: "CHECK",
                          fill: 'dodgerblue',
                          width: 14,
                          height: 14,
                          margin: new go.Margin(0, 0, 0, -16),
                          visible: false
                        },
                        new go.Binding("visible", "isSelected").makeTwoWay()),
                    {
                      click: function (e, obj) {
                        var shape = obj.findObject("CHECK");
                        shape.diagram.startTransaction("checkbox");
                        shape.visible = !shape.visible;
                        shape.diagram.commitTransaction("checkbox");
                      }
                    },
                    $_$(go.Picture,
                        {
                          width: 24,
                          height: 24,
                          margin: new go.Margin(0, 4, 0, 0),
                          imageStretch: go.GraphObject.Uniform,
                          source: '/assets/ie-structure/tree.png'
                        }
                    ),
                    $_$(go.TextBlock,
                        {font: '9pt Verdana, sans-serif'},
                        new go.Binding("text", "text", function (s) {
                          return s;
                        })
                    )
                )
            )
        )
    );

    // with lines
    myTreeView.linkTemplate = $_$(go.Link,
        {
          selectable: false,
          routing: go.Link.Orthogonal,
          fromEndSegmentLength: 4,
          toEndSegmentLength: 4,
          fromSpot: new go.Spot(0.001, 1, 7, 0),
          toSpot: go.Spot.Left
        },
        $_$(go.Shape,
            {stroke: 'black'})
    );


    myTreeView.model = $_$(go.TreeModel, {nodeParentKeyProperty: "group"});

    function borderStyle() {
      return {
        fill: "white",
        stroke: "lightseagreen",
        strokeWidth: 2
      };
    }

    function imageConverter(prop, picture) {
      var node = picture.part;
      if (node.isTreeLeaf) {
        return "/assets/ie-structure/user.png";
      } else {
        if (node.isTreeExpanded) {
          return "/assets/ie-structure/openFolder.png";
        } else {
          return "/assets/ie-structure/closedFolder.png";
        }
      }
    }
  }

  $('.btn-ie-structure-next').click(function () {
    var nowStep = $('.project_stepy').getStep();
    nowStep++;
    $('.project_stepy').setStep(nowStep);
    click_tabs("improve_content", "round_kpi_setting");

    add_kpi_target();
  });

  /**********************************************************************************
   * KPI Settings
   ************************************************************************************/

  function add_kpi_target() {
    //  Target
    $('.add-kpi-target').click(function () {
      var Panel = $(this).parent().parent();
      var PanelBody = Panel.find('.kpi-body');
      var PanelHeader = Panel.find('.kpi-name');

      $(this).popModal({
        html: $('#round-target-modal').html(),
        placement: 'bottomRight',
        showCloseBut: true,
        onDocumentClickClose: true,
        onOkBut: function () {
          var KPITargetName = $('.input-round-target-name').val();
          var KPITargetValue = $('.input-round-target-value').val();
          var KPITargetUnit = PanelHeader.attr('unit');
          var KPITargetID = PanelHeader.attr('id');

          $.ajax({
            url: '/kpis/settings/' + KPITargetID + '/targets',
            type: 'post',
            dataType: 'json',
            data: {
              target: {
                name: KPITargetName,
                value: KPITargetValue
              }
            },
            success: function (data) {
              $('<div class="col-lg-2 col-md-3 col-sm-4 col-xs-6">' +
                  '<div class="kpi-target" id="' + data.id + '">' +
                  '<div class="pull-right">' +
                  '<i class="kpi-target-remove glyphicon glyphicon-remove"></i></div>' +
                  '<div class="kpi-target-value">' + data.value + KPITargetUnit + '</div>' +
                  '<div class="kpi-target-name">' + data.name + '</div></div></div>').appendTo(PanelBody);
            },
            error: function () {
              console.log("Something Error!");
            }
          });
        },
        onClose: function () {
          $('.kpi-target').mouseenter(function () {
            $(this).find('.kpi-target-remove').fadeIn();
            remove_target();
          });

          $('.kpi-target').mouseleave(function () {
            $(this).find('.kpi-target-remove').fadeOut();
          });
        }
      });
    });
  }

  function remove_target() {
    $('.kpi-target-remove').unbind('click').click(function () {
      var KPITarget = $(this).parent().parent();
      var TargetID = KPITarget.attr("id");
      var KPITargetID = KPITarget.parent().parent().parent().parent().find('.kpi-name').attr('id');
      if (confirm("are you sure?")) {
        $.ajax({
          url: '/kpis/settings/' + KPITargetID + '/targets/' + TargetID,
          type: 'delete',
          dataType: 'json',
          success: function (data) {
            if (data.result) {
              KPITarget.parent().remove();
            } else {
              $('<div>Delete Error!</div>').notifyModal();
            }
          },
          error: function () {
            console.log("Something Error!");
          }
        });
      }
    });
  }

  function add_target(kpi) {
    /*Setting_Item */
    if (kpi.hasOwnProperty("setting_items") && kpi.setting_items.length > 0) {
      var SettingItemsHtml = "";
      for (var i = 0; i < kpi.setting_items.length; i++) {
        SettingItemsHtml += '<div class=" col-lg-4 col-md-4 col-sm-6 col-xs-12"><div class="input-group">' +
            '<span class="input-group-addon" name="' + kpi.setting_items[i].field_name + '" id="' + kpi.setting_items[i].id + '">' + kpi.setting_items[i].name + '(' + kpi.setting_items[i].field_unit_string + ')</span>' +
            '<input type="text" class="form-control" value="' + kpi.setting_items[i].field_value + '" aria-describedby="' + kpi.setting_items[i].id + '">' +
            '<span class="input-group-addon default-target-save"><i class="glyphicon glyphicon-ok-circle"></i></span></div></div>'
      }

      $('<div class="kpi-settings" role="tab">' +
          '<div class="kpi-name" unit="' + kpi.unit_string + '" id="' + kpi.id + '">' + kpi.name + '</div>' +
          '<div class="kpi-options pull-right">' +
          '<i class="glyphicon glyphicon-chevron-down collapsed" data-toggle="collapse" data-parent="#kpi_settings" href="#' + kpi.name + '" aria-expanded="true" aria-controls="' + kpi.name + '"></i>' +
          '<i class="glyphicon glyphicon-plus-sign add-kpi-target"></i>' +
          '</div><div class="kpi-body panel-body panel-collapse collapse in" id="' + kpi.name + '" role="tabpanel">' +
          '<div class="default-target row">' + SettingItemsHtml + '</div>' +
          '</div></div>').appendTo('#kpi_settings');
    } else {
      $('<div class="kpi-settings" role="tab">' +
          '<div class="kpi-name" unit="' + kpi.unit_string + '" id="' + kpi.id + '">' + kpi.name + '</div>' +
          '<div class="kpi-options pull-right">' +
          '<i class="glyphicon glyphicon-chevron-down collapsed" data-toggle="collapse" data-parent="#kpi_settings" href="#' + kpi.name + '" aria-expanded="true" aria-controls="' + kpi.name + '"></i>' +
          '<i class="glyphicon glyphicon-plus-sign add-kpi-target"></i>' +
          '</div><div class="kpi-body panel-body panel-collapse collapse"id="' + kpi.name + '" role="tabpanel"></div></div>').appendTo('#kpi_settings');
    }

    /*Target*/
    if (kpi.hasOwnProperty("targets") && kpi.targets.length > 0) {
      for (var tg = 0; tg < kpi.targets.length; tg++) {
        var KpiSetting = $('#' + kpi.id).parent();
        var UnitString = KpiSetting.find('.kpi-name').attr('unit');

        $('<div class="col-lg-2 col-md-3 col-sm-4 col-xs-6">' +
            '<div class="kpi-target" id="' + kpi.targets[tg].id + '">' +
            '<div class="pull-right"></div>' +
            '<div class="kpi-target-value">' + kpi.targets[tg].value + UnitString + '</div>' +
            '<div class="kpi-target-name">' + kpi.targets[tg].name + '</div></div></div>').appendTo(KpiSetting.find('.kpi-body'));
      }
    }
  }

  $('#kpi_setting').on('click', '.default-target-save', function () {
    var setting_id = $(this).parent().parent().parent().parent().parent().find('.kpi-name').attr('id');
    var setting_item_id = $(this).parent().find('.input-group-addon').attr("id");
    var setting_name = $(this).parent().find('.input-group-addon').attr("name");
    var setting_value = $(this).parent().find('.form-control').val();

    if (!isNaN(setting_value)) {
      $.ajax({
        url: '/kpis/settings/' + setting_id + "/setting_items/" + setting_item_id,
        type: 'put',
        dateType: 'json',
        data: {
          setting_item: {
            field_value: setting_value
          }
        },
        success: function (data) {
          console.log(data);
          if (data.result) {
            $('<div>保存成功</div>').notifyModal();
          } else {
            $('<div>保存失败</div>').notifyModal();
          }
        },
        error: function () {
          console.log("Something Error!");
        }
      })
    } else {
      $('<div>value 只能是数字</div>').notifyModal();
    }
  });


  $('.btn-kpi-setting-next').click(function () {
    window.location.href = "http://" + window.location.host + "/projects/" + <%= @project_item.project.id %>;
  });

  /*Load Step*/
  $(".project_stepy").loadStep({
    size: "large",
    color: "green",
    steps: [{
      title: "PDCA",
      content: "Project Basic Info"
    }, {
      title: "IE Structure",
      content: "IE Structure"
    }, {
      title: "KPI Setting",
      content: "Set KPI Target"
    }]
  });

  var ScreenHeight = $(window).height();
  var ScreenWidth = $(window).width();

  $('#myDiagramDiv').css({height: (ScreenHeight * 0.58) + 'px'});
  $('#myTreeView').css({height: (ScreenHeight * 0.58) + 'px'});

  $(window).load(function () {
    $.ajax({
      url: "/project_items/" + '<%= @project_item.id %>' + '/nodes',
      type: 'get',
      dateType: 'json',
      success: function (data) {
        console.log(data);
        if (data.result) {
          $('#round_diagram_id').val(data.diagram.id);
          $('#mySavedModel').val(data.diagram.layout);

          for (var kpi in data.settings) {
            add_target(data.settings[kpi]);
          }
        } else {
          $('<div>' + data.content + '</div>').notifyModal();
        }
      },
      error: function () {
        console.log("Something Error!");
      }
    });
  });

  function load() {
    save();

    myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);

    // share all of the data with the tree view
    myTreeView.model.nodeDataArray = myDiagram.model.nodeDataArray;

    // share the UndoManager too!
    myTreeView.model.undoManager = myDiagram.model.undoManager;
  }

  function save() {
    document.getElementById("mySavedModel").value = myDiagram.model.toJson();

    myDiagram.isModified = false;

    $.ajax({
      url: '/diagrams/' + $('#round_diagram_id').val(),
      type: 'put',
      dataType: 'json',
      data: {
        parse: true,
        diagram: {
          layout: myDiagram.model.toJson()
        }
      }
    });
  }

  function click_tabs(project_id, content_id) {
    $('#' + project_id + ' a[href="#' + content_id + '"]').tab('show');
  }

  /***********************************************************************************
   Check Email
   ***********************************************************************************/
  $('#round_pdca_owner').tagEditor({
    placeholder: 'Owner',
    beforeTagSave (field, editor, tags, tag, val){
      CheckEmail('#round_pdca_owner', val);
    }
  });

  /*Update PDCA Check Email*/
  $('#edit_pdca_owner').tagEditor({
    placeholder: 'Edit Owner',
    beforeTagSave (field, editor, tags, tag, val){
      CheckEmail('#edit_pdca_owner', val);
    }
  });

  function CheckEmail(div, val) {
    $.ajax({
      url: '/users/check_email',
      type: 'get',
      data: {
        email: val
      },
      success: function (data) {
        console.log(data);
        if (data.result) {

        } else {
          $(div).tagEditor('removeTag', val);
          $('<div>' + val + ' is not exist.</div>').notifyModal();
        }
      },
      error: function () {
        console.log("ADD PDCA User Wrong!");
        $(div).tagEditor('removeTag', val);
        $('<div>Something Error!</div>').notifyModal();
      }
    })
  }

  function ClosePop(div) {
    $('.md-close').click(function () {
      $(div).removeClass('md-show');
    });
  }

  $('.date-picker').datetimepicker({
    lang: 'ch',
    timepicker: false
  });
</script>